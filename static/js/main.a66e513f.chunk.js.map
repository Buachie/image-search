{"version":3,"sources":["components/ImageDisplay.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["ImageDisplay","state","open","currentImage","handleOpen","img","setState","handleClose","imageListContent","images","this","props","GridList","cols","className","map","title","tags","key","id","rows","subtitle","user","actionIcon","onClick","largeImageURL","color","src","actions","label","primary","modal","onRequestClose","alt","style","width","Component","SearchBar","searchEntry","apiUrl","apiKey","handleChange","e","target","name","value","api","fetch","then","res","json","result","i","hits","length","imageWidth","imageHeight","Object","assign","console","log","type","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a66e513f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Gallery from \"react-photo-gallery\";\nimport {GridList, GridTile} from 'material-ui/GridList';\nimport iconButton from 'material-ui/IconButton'\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in'\nimport Dialog from 'material-ui/Dialog'\nimport FlatButton from 'material-ui/FlatButton'\nimport propTypes from 'prop-types'\nimport IconButton from 'material-ui/IconButton/IconButton';\nexport class ImageDisplay extends Component {\n    state ={\n        open: false,\n        currentImage: ''\n    }    \n\n\n    handleOpen =(img)=>{\n        this.setState({open:true, currentImage: img})\n    }\n    handleClose =(img)=>{\n        this.setState({open:false})\n    }\n    render() {\n        let imageListContent;\n        const {images} = this.props;\n\n        if(images){\n            imageListContent =(\n                <GridList cols={5} className=\"flex\">\n                    {images.map(img =>(\n                        <GridTile title={img.tags} \n                        key={img.id} \n                        cols={img.cols || 1}\n                        rows={1}\n                        subtitle= {\n                        <span> \n                            Photo by <strong>{img.user}</strong>\n                        </span>\n                        }\n                        actionIcon={\n                            <IconButton onClick={()=> this.handleOpen(img.largeImageURL)}>\n                                <ZoomIn color=\"white\"/>\n                            </IconButton>\n                        }>\n                            <img src={img.largeImageURL} className=\"img-src\"/>\n                        </GridTile>\n                    \n                    ))}\n                </GridList>\n            )\n            \n        } else{\n            imageListContent= null;\n        }\n\n        const actions= [\n            <FlatButton label =\"Close\" primary={true} onClick={this.handleClose}/>\n        ]\n\n        return (\n            <div className=\"container-lg\">\n                {imageListContent}\n                <Dialog\n                    actions={actions}\n                    modal={false}\n                    open={this.state.open}\n                    onRequestClose={this.handleClose}>\n                        <img src={this.state.currentImage} alt=\"\" style={{width:'100%'}}/>\n                    </Dialog>\n            </div>\n        )\n    }\n};\n\nImageDisplay.propTypes = {\n    images: propTypes.array.isRequired\n}\n\nexport default ImageDisplay\n\n\n","import React, { Component } from 'react'\nimport ImageDisplay from './ImageDisplay'\nexport class SearchBar extends Component {\n\n        state ={\n            searchEntry: '',\n            apiUrl: 'https://pixabay.com/api',\n            apiKey:'14272018-277a44d4d1ae6e42f42ed7772',\n            images:[]\n        }\n\n\n\n    handleChange =(e) =>{\n        this.setState({[e.target.name]:e.target.value}, ()=>{\n            let api =`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchEntry}&image_type=photo&per_page=70&safesearch=true`\n            fetch(api)\n            .then(res=> res.json())\n            .then(\n                (result) => {\n                    for (let i = 0; i < result.hits.length; i++) {\n                        \n                        if(result.hits[i].imageWidth > (result.hits[i].imageHeight * 1.5)){\n                            result.hits[i]= Object.assign({'cols' : 2, },result.hits[i])\n                            console.log(result.hits[i])\n                        }\n                        \n                    }\n                    this.setState({images:result.hits})\n                    console.log(this.state)\n                }\n            )\n        })\n        \n    }\n\n    render() {\n        //console.log(this.state.images)\n        return (\n            <div>\n            <div className=\"search-container\">\n                <h1 className=\"txt-wht\">Pixabay Image Search</h1>\n                <input type= \"search\" name=\"searchEntry\" className=\"search-bar\" value= {this.state.searchEntry} onChange={this.handleChange}></input>\n            </div>\n            <br/>\n            {this.state.images.length > 0? (<ImageDisplay images={this.state.images}/>) : null}\n            </div>\n            \n\n        )\n    }\n}\n\nexport default SearchBar\n","import React, { Component } from 'react'\nimport './App.css';\nimport SearchBar from './components/SearchBar'\nimport ImageDisplay from './components/ImageDisplay';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\n\nexport class App extends Component {\n\n  render() {\n    return (\n      <div className=\"main\">\n        \n        <MuiThemeProvider>\n        <SearchBar/>\n        <ImageDisplay/>\n        </MuiThemeProvider>\n        \n        \n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}